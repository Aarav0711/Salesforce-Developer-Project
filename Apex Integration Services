(Module: Apex REST Callouts)

Apex class: AnimalLocator
public class AnimalLocator {
 public static String getAnimalNameById (Integer id) {
        String AnimalName = '';        
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals/'+id);
        request.setMethod('GET');
        HttpResponse response = http.send(request);
        if (response.getStatusCode() == 200) {
            Map<String,Object> results = (Map<String,Object>) JSON.deserializeUntyped(response.getBody());
            Map<String, Object> animal = (Map<String, Object>) results.get('animal');
            animalName = (String) animal.get('name');
        }
        return animalName;
    } }
-----------------------------------------------------------------------------------------------------------------
Apex test class: AnimalLocatorTest
@isTest
private class AnimalLocatorTest {
@isTest static  void testGet() {
        Test.setMock(HttpCalloutMock.class, new AnimalLocatorMock());
        // Call method to test
        String result = AnimalLocator.getAnimalNameById (7);
        // Verify mock response is not null
        System.assertNotEquals(null,result,
                               'The callout returned a null response.');        
        System.assertEquals('dog', result,
                            'The animal name should be \'dog\'');          
    } }
------------------------------------------------------------------------------------------------------------------
Test class uses a Mock class: AnimalLocatorMock
@isTest
global class AnimalLocatorMock implements HttpCalloutMock{
 
    // Implement this interface method
    global HTTPResponse respond(HTTPRequest request) {
        // Create a fake response
        HttpResponse response = new HttpResponse();
        response.setHeader('Content-Type', 'application/json');
        response.setBody('{"animal":{"id":7,"name":"dog","eats":"meat","says":"i am a lovely pet animal"}}');
        response.setStatusCode(200);
        return response; 
    } }
------------------------------------------------------------------------------------------------------------------
(Module: Apex SOAP Callouts)

Apex class: ParkLocator
public class ParkLocator {
    public static string[] country(string theCountry) {
        ParkService.ParksImplPort  parkSvc = new ParkService.ParksImplPort();
        return parkSvc.byCountry(theCountry);
    } }
------------------------------------------------------------------------------------------------------------------
Apex test class: ParkLocatorTest
@isTest
private class ParkLocatorTest {
    @isTest static void testCallout() {              
        Test.setMock(WebServiceMock.class, new ParkServiceMock ());
        String country = 'United States';
        List<String> result = ParkLocator.country(country);
        List<String> parks = new List<String>{'Kaziranga National Park', 'Gir National Park', 'Deer Park'};
         System.assertEquals(parks, result); 
    } }
-------------------------------------------------------------------------------------------------------------------
Test class uses a Mock class: ParkServiceMock
@isTest
global class ParkServiceMock implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {
        // start - specify the response you want to send
        ParkService.byCountryResponse response_x = new ParkService.byCountryResponse();
        response_x.return_x = new List<String>{'Kaziranga National Park', 'Gir National Park', 'Deer Park'};
        // end
        response.put('response_x', response_x); 
   } }
--------------------------------------------------------------------------------------------------------------------
(Module: Apex Web Services)

Apex class: AccountManager
@RestResource(urlMapping='/Accounts/*/contacts')
global class AccountManager {
    @HttpGet
    global static Account getAccount() {
        RestRequest req = RestContext.request;
        String accId = req.requestURI.substringBetween('Accounts/', '/contacts');
        Account acc = [SELECT Id, Name, (SELECT Id, Name FROM Contacts) 
                       FROM Account WHERE Id = :accId];
        return acc;
    }
}
---------------------------------------------------------------------------------------------------------------------
Apex test class: AccountManagerTest
@isTest
private class AccountManagerTest {
 private static testMethod void getAccountTest1() {
        Id recordId = createTestRecord();
        // Set up a test request
        RestRequest request = new RestRequest();
        request.requestUri = 'https://na1.salesforce.com/services/apexrest/Accounts/'+ recordId +'/contacts' ;
        request.httpMethod = 'GET';
        RestContext.request = request;
        // Call the method to test
        Account thisAccount = AccountManager.getAccount();
// Verify results
        System.assert(thisAccount != null);
        System.assertEquals('Test record', thisAccount.Name);
 
    }
// Helper method
        static Id createTestRecord() {
        // Create test record
        Account TestAcc = new Account(
          Name='Test record');
        insert TestAcc; Contact TestCon= new Contact(
        LastName='Test', 
        AccountId = TestAcc.id);
        return TestAcc.Id;
}}
